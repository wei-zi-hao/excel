<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ek.project.system.mail.mapper.MailMapper">
    
    <resultMap type="Mail" id="MailResult">
        <result property="mailId"    column="mail_id"    />
        <result property="mailAccount"    column="mail_account"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
    </resultMap>

    <sql id="selectMailVo">
        select mail_id, mail_account, create_by, create_time, update_by, update_time from mail
    </sql>

    <select id="selectMailList" parameterType="Mail" resultMap="MailResult">
        <include refid="selectMailVo"/>
        <where>  
            <if test="mailAccount != null  and mailAccount != ''"> and mail_account = #{mailAccount}</if>
        </where>
    </select>
    
    <select id="selectMailById" parameterType="Long" resultMap="MailResult">
        <include refid="selectMailVo"/>
        where mail_id = #{mailId}
    </select>

    <select id="checkMailAccountUnique" resultMap="MailResult" parameterType="String">
        select mail_id, mail_account from mail where mail_account=#{mailAccount}
    </select>


    <select id="selectAllocatedListByForm" parameterType="Mail" resultMap="MailResult">
        select distinct  m.mail_id,m.mail_account, m.create_time,m.create_by
        ,m.update_by,m.update_time
        from mail m
        left join form_mail fm on fm.mail_id = m.mail_id
        where fm.form_info_id = #{formId}
        <if test="mailAccount != null and mailAccount != ''">
            AND m.mail_account like concat('%', #{mailAccount}, '%')
        </if>


    </select>
    <select id="selectUnallocatedListByForm" resultMap="MailResult" parameterType="Mail">
        select distinct  m.mail_id,m.mail_account, m.create_time,m.create_by
        ,m.update_by,m.update_time
        from mail m
        where
          m.mail_id not in (select mail_id from form_mail where form_info_id = #{formId})
        <if test="mailAccount != null and mailAccount != ''">
            AND m.mail_account like concat('%', #{mailAccount}, '%')
        </if>

    </select>


    <insert id="insertMail" parameterType="Mail">
        insert into mail
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="mailId != null ">mail_id,</if>
            <if test="mailAccount != null  and mailAccount != ''">mail_account,</if>
            <if test="createBy != null  and createBy != ''">create_by,</if>
            <if test="createTime != null ">create_time,</if>
            <if test="updateBy != null  and updateBy != ''">update_by,</if>
            <if test="updateTime != null ">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="mailId != null ">#{mailId},</if>
            <if test="mailAccount != null  and mailAccount != ''">#{mailAccount},</if>
            <if test="createBy != null  and createBy != ''">#{createBy},</if>
            <if test="createTime != null ">#{createTime},</if>
            <if test="updateBy != null  and updateBy != ''">#{updateBy},</if>
            <if test="updateTime != null ">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateMail" parameterType="Mail">
        update mail
        <trim prefix="SET" suffixOverrides=",">
            <if test="mailAccount != null  and mailAccount != ''">mail_account = #{mailAccount},</if>
            <if test="createBy != null  and createBy != ''">create_by = #{createBy},</if>
            <if test="createTime != null ">create_time = #{createTime},</if>
            <if test="updateBy != null  and updateBy != ''">update_by = #{updateBy},</if>
            <if test="updateTime != null ">update_time = #{updateTime},</if>
        </trim>
        where mail_id = #{mailId}
    </update>

    <delete id="deleteMailById" parameterType="Long">
        delete from mail where mail_id = #{mailId}
    </delete>

    <delete id="deleteMailByIds" parameterType="String">
        delete from mail where mail_id in 
        <foreach item="mailId" collection="array" open="(" separator="," close=")">
            #{mailId}
        </foreach>
    </delete>
    
</mapper>